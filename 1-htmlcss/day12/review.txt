第一阶段：重构（编写静态页面【布局，美化】）
1. html5(标签)
  1) 块级标签
  2) 行内标签
  3) 功能性标签
    a
    image
    table
    form
    iframe
2. CSS3
  1) 语法
    选择器 {
      规则
    }
  2) css如何应用到html中
  3) 选择器
    基本选择器、层次选择器、属性选择器、伪类选择器、伪元素选择器
  4) 规则
    1. 字体规则
      font-*  
      网络字体（字体图标库【iconfont】）
    2. 文本规则
      text-*
    3. 列表
      list-style:none;
    4. 盒子规则
      width
      height
      margin-*
      padding-*
      border-*
      background-*
    5. 其他规则
  5) 级联与继承
    优先级
    1.特权  !important
    2.权值  
      1000  style属性
      100   id
      10    类，伪类
      1     元素，伪元素
    2.顺序
      后者覆盖前者

    <style>
      div {
        color:red !important; /*1*/
      }
      .one {
        color:blue;   /*10*/
      }
      #first { 
        color:green;    /*100*/
      }
    </style>
    <div class="one" id="first" style="color:lightblue;"> hello world </div>
  6) 布局
    盒子（块元素）不再按照默认文档流的方式进行排列，也就是让盒子在一行中显示或者是脱离文档流显示（显示在其他盒子之上）

    脱离文档流：
      1) 宽度不再为100%，宽度默认为内容的宽度；
      2) 不再占据屏幕中原有的空间，失去了对于父元素的支撑。
    1. 浮动布局
      float:left
      clear:both;

      display:block;          使得元素变为块元素
      display:inline;         使得元素变为行内元素
      display:inline-block;   使得元素变为行内块元素

      <div style="display:inline"></div>
    2. 定位布局
      position:relative;  相对定位
        不脱离文档流；
        相对于自身所在位置
      position:absolute;  绝对定位
        脱离文档流
        相对于距离他最近的父定位元素
      position:fixed;     固定定位
        脱离文档流
        相对于浏览器视口
      position:sticky;    粘滞定位
        相对定位和固定定位的一种结合

    3. 伸缩盒布局
      应用在父元素上的规则
        display:flex;
        flex-direction:row; column;
        flex-wrap:no-wrap;
        justify-content: space-around;  /*伸缩盒元素在主轴上的排列方式*/
				align-items:stretch;            /*伸缩盒元素在交叉轴的排列*/
      应用在子元素上的规则
        flex-basis:
        flex-grow:
        flex-shrink:
        flex: 速写形式
  



第二阶段：js及框架阶段
1. linux操作系统
2. Javascript
3. Html5 API
4. 开源框架 jQuery/bootstrap/easyui/echarts/...


第三阶段：企业级开发阶段
1. 高级Javascript(ES6)
2. VUE
3. 企业级开发